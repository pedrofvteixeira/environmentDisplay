<?xml version="1.0" encoding="UTF-8"?>
<CDADescriptor>
   <DataSources>
      <Connection id="systemInfo" type="scripting.scripting">
         <Initscript></Initscript>
         <Language>beanshell</Language>
      </Connection>
   </DataSources>
   <DataAccess access="public" cache="false" cacheDuration="3600" connection="systemInfo"
               id="systemInfo"
               type="scriptable">
      <Columns/>
      <Parameters/>
      <Query>import org.pentaho.reporting.engine.classic.core.util.TypedTableModel;
import org.pentaho.platform.engine.core.system.*;
import org.pentaho.platform.api.engine.*;
import org.pentaho.platform.web.http.session.PentahoHttpSession;
import java.util.Arrays;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import org.pentaho.reporting.engine.classic.core.ClassicEngineBoot;
import org.pentaho.reporting.engine.classic.core.ClassicEngineInfo;
import org.pentaho.reporting.engine.classic.core.metadata.DataFactoryRegistry;
import org.pentaho.reporting.engine.classic.core.metadata.ElementTypeRegistry;
import org.pentaho.reporting.engine.classic.core.metadata.ExpressionRegistry;
import org.pentaho.reporting.engine.classic.core.metadata.MetaData;
import org.pentaho.reporting.engine.classic.core.util.TypedTableModel;
import org.pentaho.reporting.libraries.base.boot.Module;
import org.pentaho.reporting.libraries.base.boot.PackageManager;


String[] columnNames = new String[3];
columnNames[0] = "Group";
columnNames[1] = "Variable";
columnNames[2] = "Value";

Class[] columnTypes = new Class[3];
columnTypes[0] = String.class;
columnTypes[1] = String.class;
columnTypes[2] = String.class;

TypedTableModel model = new TypedTableModel( columnNames, columnTypes);

/*
 *  Generic functions
 */

  Map collectEngineData()
  {
    TreeMap s = new TreeMap();
    s.put("Version", ClassicEngineInfo.getInstance().getVersion());
    return s;
  }

  Map collectModules()
  {
    PackageManager packageManager = ClassicEngineBoot.getInstance().getPackageManager();
    Module[] modules = packageManager.getAllModules();
    TreeMap s = new TreeMap();
    for (int i = 0; i &lt; modules.length; i++)
    {
      Module module = modules[i];
      String av = packageManager.isModuleAvailable(module) ? "Available" : "Disabled";
      s.put(module.getName(), av);
    }
    return s;
  }

  Map collectData(MetaData[] data)
  {
    TreeMap s = new TreeMap();
    for (int i = 0; i &lt; data.length; i++)
    {
      MetaData metaData = data[i];
      try{
        s.put(metaData.getDisplayName(Locale.ENGLISH), metaData.getName());
      }catch(Exception e){
        System.out.println("Failed to collect data for " + metaData.getName());
      }
    }
    return s;
  }

  void add (TypedTableModel model, String type, Map map)
  {
    String[] keys = (String[]) map.keySet().toArray(new String[map.size()]);
    Arrays.sort(keys);
    for (int i = 0; i &lt; keys.length; i++)
    {
      String key = keys[i];
      model.addRow(new Object[]{type, key, map.get(key)});
    }
  }
  
  String getAttributeValue(Object tmp){

    // System.out.println("Attribute: " + x + "; Type:" + tmp.getClass());
    String val = (tmp != null) ? tmp.toString() : "null";
    String typ = (tmp != null) ? tmp.getClass().toString() : "null";
    
    return val;
  }
  
  void collectPentahoSessionAttributes (String title, PentahoHttpSession session)
  {
  
    for(java.util.Iterator e2 = session.getAttributeNames();e2.hasNext() ;){

    x = (String)e2.next();
    tmp = pentahoSession.getAttribute(x);
    System.out.println("  XXXXXXXX " + x +" = "+tmp);
    //model.addRow( new Object[]{title, val, getAttributeValue(tmp)});
    }

  }


/*
 *  Accessing the variables needed
 */



Thread.currentThread().setContextClassLoader( org.pentaho.platform.engine.core.system.PentahoSessionHolder.class.getClassLoader() );
final IPentahoSession pentahoSession = PentahoSessionHolder.getSession();


ClassLoader contextCL = Thread.currentThread().getContextClassLoader();
try {

    Thread.currentThread().setContextClassLoader( org.pentaho.platform.engine.core.system.PentahoSessionHolder.class.getClassLoader() );
    final IPentahoSession pentahoSession = PentahoSessionHolder.getSession();
} catch ( Exception e ) {
} finally {
  Thread.currentThread().setContextClassLoader( contextCL );
}


/*
 *  Getting Pentaho Session Info
 */


String x = null;
Object tmp = null;


for(java.util.Iterator e2 = pentahoSession.getAttributeNames();e2.hasNext() ;){

    x = (String)e2.next();
    tmp = pentahoSession.getAttribute(x);
    

    System.out.println("Attribute: " + x + "; Type:" + tmp.getClass());
    
    if(tmp instanceof String){
        model.addRow( new Object[]{"Pentaho Session Variable", x, getAttributeValue(tmp)});
    }
    else if(tmp instanceof PentahoHttpSession){
    
    }
    else{
        //System.out.println("Name: " + x + "; Class: " + tmp.getClass().getName() );
        model.addRow( new Object[]{"Pentaho Session Variable", x, getAttributeValue(tmp)});
    }
}

/*
 *  Get generic info
 */


model.addRow( new Object[]{"Runtime Information", "Processors", Runtime.getRuntime().availableProcessors()});
model.addRow( new Object[]{"Runtime Information", "Max Memory", Runtime.getRuntime().maxMemory()});
model.addRow( new Object[]{"Runtime Information", "Total Memory", Runtime.getRuntime().totalMemory()});


/*
 *  HttpSession Info
 */

java.lang.reflect.Field field = pentahoSession.getClass().getDeclaredField("session");
field.setAccessible(true); // this basically overrides the private setting in the PentahoHttpSession class
javax.servlet.http.HttpSession httpSession = (javax.servlet.http.HttpSession)field.get(pentahoSession);

for(java.util.Enumeration e3 = httpSession.getServletContext().getInitParameterNames(); e3.hasMoreElements() ;){
    x = (String)e3.nextElement();
    tmp = httpSession.getServletContext().getInitParameter(x);
    model.addRow( new Object[]{"Pentaho Servlet Context Init Attribute", x, tmp});
}


/*
 *  Get reporting info
 */


add(model, "System Properties", System.getProperties());
add(model, "Environment", System.getenv());
add(model, "Reporting Engine", collectEngineData());
add(model, "Reporting Modules", collectModules());
//add(model, "Reporting Data-Factories", collectData(DataFactoryRegistry.getInstance().getAll()));
add(model, "Reporting Elements", collectData(ElementTypeRegistry.getInstance().getAllElementTypes()));
add(model, "Reporting Expressions", collectData(ExpressionRegistry.getInstance().getAllExpressionMetaDatas()));


return model;</Query>
   </DataAccess>
</CDADescriptor>